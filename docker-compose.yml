# Core services (always running)
services:
  db:
    image: postgres:17-alpine
    container_name: sakumari-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - sakumari
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: sakumari-pgadmin
    ports:
      - "8080:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - ./data/pgadmin:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - sakumari
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/pgadmin

  # Production app service (prod profile)
  app:
    image: sakumari:latest
    container_name: sakumari-app
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      POSTGRES_PRISMA_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      POSTGRES_URL_NON_POOLING: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      AUTH_URL: ${AUTH_URL}
      AUTH_SECRET: ${AUTH_SECRET}
      AUTH_GOOGLE_ID: ${AUTH_GOOGLE_ID}
      AUTH_GOOGLE_SECRET: ${AUTH_GOOGLE_SECRET}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    user: "nextjs:nodejs"
    networks:
      - sakumari
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    profiles:
      - prod

  # Build from source service (build profile)
  app-build:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sakumari-app-build
    ports:
      - "3001:3000"
    environment:
      NODE_ENV: production
      POSTGRES_PRISMA_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      POSTGRES_URL_NON_POOLING: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      AUTH_URL: ${AUTH_URL}
      AUTH_SECRET: ${AUTH_SECRET}
      AUTH_GOOGLE_ID: ${AUTH_GOOGLE_ID}
      AUTH_GOOGLE_SECRET: ${AUTH_GOOGLE_SECRET}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    user: "nextjs:nodejs"
    networks:
      - sakumari
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    profiles:
      - build

  # Cloudflare tunnel (prod profile only)
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: sakumari-cloudflared
    command: ["tunnel", "--no-autoupdate", "run", "--token", "${CLOUDFLARE_TUNNEL_TOKEN}"]
    restart: unless-stopped
    networks:
      - sakumari
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
      - /etc/cloudflared
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
    profiles:
      - prod

networks:
  sakumari:
    driver: bridge
    name: sakumari